# ------------------------------------------------------------------------------
#+TITLE:     dotfiles
#+SUBTITLE:  Holy Frege -12. June 2021
#+AUTHOR:    Holy Frege
#+EMAIL:     holy_frege@fastmail.com
#+STARTUP:   content showstars indent inlineimages hideblocks
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
# ------------------------------------------------------------------------------
* dotfile init과정
- my design
  dotfile을 만드는 과정은 여러방법이 있는데, 난 간단하게 하기로 했다. shell script로 된 설정파일(emacs에서 사용되는 폴더, security관련 파일 포함)과 application을 위한 brewfiles다. 그리고 security관련 파일인 .gpgnu와 .ssh는 dropbox에 저장한다. +application관련은 brewfiles로 만들어 github에 저장하고, shell script관련 설정은 dropbox에서 관리하기로 했다. github에 다 관리하지 않는 이유는 security관련 파일들이 있기 때문이다. gpg로 암호화해서 올린다고 해도, gpg private key는 내가 가지고 있어야 하기 때문이다.+

  - bootstrap.sh: shell script와 폴더를 symbolic link하는 명령어를 갖는  shell script. 목록도 유지한다. (security관련 파일은 dropbox에 저장)
  - brewfiles: brew로 설치되는 application을 가지고 있다. (github에 저장)
    
- dotfiles 만드는 과정
  1) git에 .dotfiles project를 만든다.
  2) .dotifiles 프로젝트를 /home에 clone한다.
  3) clone한 .dotfiles 폴더안에 설정파일을 다 집어넣고, bootstrap.sh를 만든다.
  4) brew bundle dump를 사용하면 현재 system에서  brew로 설치하는 application package가 list로 출력된다. 이것을 .dotfiles로 넣는다.
  5) .dotfiles을 git에 push한다.
  6) .gnupg와 .ssh는 보안을 위해서 dropbox에 저장한다.

* .dotfiles 복원하는 과정 (새로운 system에 적용하는 경우, 순서중요)
** Preperation
- 새로운 os를 설치한 이후 진행된다.
- brew를 설치한다. [[https://brew.sh][참조]]
- brew로 git을 설치한다. (brew install git)
- brew로 dropbox를 설치한다. (brew install --cask dropbox)
- github에 있는 .dotfiles라는 project를 clone한다.

** restore brewfiles
- dotfiles폴더에서 brew bundle [--file=<path>] 을 실행한다.

** restore securities from dropbox
- security관련 파일에 대한 link는 boostrap.sh에 있기 때문에 아래에서 실행해주면 home폴더로 symbolic link를 걸어준다.
    
** restore shell settings
- /.dotfiles/bootstrap.sh를 실행한다.

* dotfiles 백업 과정 (새로운 설정이 생겼을 때, 기존 설정의 변경이 생겼을 때)
** Preperations
- 새로운 application을 설치했는데, 이것이 유지해야 할 application인지 판단해야 한다.
- 새로운 설정파일이라면, 그리고 새로운 system을 설치할때 적용될 중요한 설정인지를 판단해야 한다.
- 기존 설정의 변경이라면 shell script는 symbolic link가 걸려 있어서 자동으로 update된다.
  
** put shell scripts into dotfiles ( 새로운 설정파일이라면 )
- ./dotfiles/boostrap.sh를 update한다.
  
** put brewfiles into dotfiles
- 새로운 app을 brew로 설치했다면, brew bundle dump 로 brewfiles를 뽑아서 .dotfiles에 넣는다.
   


*  about iterm2 and fishshell.

** terminal이 하는일
     - Input output을 shell과 연결
     - UI 화면을 제공(font,color,prompt,shell출력결과에 대한 꾸미기)
     - my terminal settings
        . terminal : iterm2
        -  font: fira code nerd font mono 14
        - color scheme: monokai pro
        - prompt: starship
        - shell: fish shell
** shell이 하는일
     - 사용자의 입력을 terminal이 받아서 shell에게 전달하면 shell에서 해석,실행.
     - shell마다 사용하는 script가 다르고, 제공하는 명령어가 다르다.
     - my shell settings : fish shell
** terminal과 shell 
    - terminal에 shell에 plugin처럼 꼽았다, 뺏다하는 구조임.
    - iterm2에도 shell을 선택하는 preference가 있는데, 제대로 동작하지 않음.
    - /etc/shells에 fish shell을 추가하고, chsh -s /usr/local/bin/fish로 fish shell을 default로 했음.
** fish shell
    - fish shell은 해석기, 그리고,omf(oh-my-fish)라고 utility, plugin 관리자가 있다.
* dotfiles about iterm2 and fishshell
** iterm2의 설정
iterm2의 설정은 com.googlecode.iterm2.plist 파일이다. 새 시스템을 설정할때, 이 설정을 load하면 된다.
daily 변경되는 설정은 preference->general->preference에서 automatically로 설정하면 된다.
** fishshell의 설정
fishshell은 .config/fish에 위치해 있다. 이것도 bootstrap.sh에서 관리한다.


* EMACS install
1) https://emacsformacosx.com download and install.
2) emacs_install.sh execute
