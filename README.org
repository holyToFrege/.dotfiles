# ------------------------------------------------------------------------------
#+TITLE:     dotfiles
#+SUBTITLE:  Holy Frege -12. June 2021
#+AUTHOR:    Holy Frege
#+EMAIL:     holy_frege@fastmail.com
#+STARTUP:   content showstars indent inlineimages hideblocks
#+OPTIONS:   toc:2 html-scripts:nil num:nil html-postamble:nil html-style:nil ^:nil
# ------------------------------------------------------------------------------
* dotfile init과정
- my design
  dotfile을 만드는 과정은 여러방법이 있는데, 난 간단하게 하기로 했다. shell script로 된 설정파일(emacs에서 사용되는 폴더, security관련 파일 포함)과 application을 위한 brewfiles다. 그리고 security관련 파일인 .gpgnu와 .ssh는 dropbox에 저장한다. +application관련은 brewfiles로 만들어 github에 저장하고, shell script관련 설정은 dropbox에서 관리하기로 했다. github에 다 관리하지 않는 이유는 security관련 파일들이 있기 때문이다. gpg로 암호화해서 올린다고 해도, gpg private key는 내가 가지고 있어야 하기 때문이다.+

  - bootstrap.sh: shell script와 폴더를 symbolic link하는 명령어를 갖는  shell script. 목록도 유지한다. (security관련 파일은 dropbox에 저장)
  - brewfiles: brew로 설치되는 application을 가지고 있다. (github에 저장)
    
- dotfiles 만드는 과정
  1) git에 .dotfiles project를 만든다.
  2) .dotifiles 프로젝트를 /home에 clone한다.
  3) clone한 .dotfiles 폴더안에 설정파일을 다 집어넣고, bootstrap.sh를 만든다.
  4) brew bundle dump를 사용하면 현재 system에서  brew로 설치하는 application package가 list로 출력된다. 이것을 .dotfiles로 넣는다.
  5) .dotfiles을 git에 push한다.
  6) .gnupg와 .ssh는 보안을 위해서 dropbox에 저장한다.

* .dotfiles 복원하는 과정 (새로운 system에 적용하는 경우, 순서중요)
** Preperation
- 새로운 os를 설치한 이후 진행된다.
- brew를 설치한다. [[https://brew.sh][참조]]
- brew로 git을 설치한다. (brew install git)
- brew로 dropbox를 설치한다. (brew install --cask dropbox)
- github에 있는 .dotfiles라는 project를 clone한다.

** restore brewfiles
- dotfiles폴더에서 brew bundle [--file=<path>] 을 실행한다.

** restore securities from dropbox
- security관련 파일에 대한 link는 boostrap.sh에 있기 때문에 아래에서 실행해주면 home폴더로 symbolic link를 걸어준다.
    
** restore shell settings
- /.dotfiles/bootstrap.sh를 실행한다.

* dotfiles 백업 과정 (새로운 설정이 생겼을 때, 기존 설정의 변경이 생겼을 때)
** Preperations
- 새로운 application을 설치했는데, 이것이 유지해야 할 application인지 판단해야 한다.
- 새로운 설정파일이라면, 그리고 새로운 system을 설치할때 적용될 중요한 설정인지를 판단해야 한다.
- 기존 설정의 변경이라면 shell script는 symbolic link가 걸려 있어서 자동으로 update된다.
  
** put shell scripts into dotfiles ( 새로운 설정파일이라면 )
- ./dotfiles/boostrap.sh를 update한다.
  
** put brewfiles into dotfiles
- 새로운 app을 brew로 설치했다면, brew bundle dump 로 brewfiles를 뽑아서 .dotfiles에 넣는다.
   
*  Mac OS 한글 깨짐.
.fix_broken으로 시작하는 파일을 double click해서 실행한다.

*  about iterm2 and fishshell.

** terminal이 하는일
     - Input output을 shell과 연결
     - UI 화면을 제공(font,color,prompt,shell출력결과에 대한 꾸미기)
     - my terminal settings
        . terminal : iterm2
        -  font: fira code nerd font mono 14
        - color scheme: monokai pro
        - prompt: starship
        - shell: fish shell
** shell이 하는일
     - 사용자의 입력을 terminal이 받아서 shell에게 전달하면 shell에서 해석,실행.
     - shell마다 사용하는 script가 다르고, 제공하는 명령어가 다르다.
     - my shell settings : fish shell
** terminal과 shell 
    - terminal에 shell에 plugin처럼 꼽았다, 뺏다하는 구조임.
    - iterm2에도 shell을 선택하는 preference가 있는데, 제대로 동작하지 않음.
    - /etc/shells에 fish shell을 추가하고, chsh -s /usr/local/bin/fish로 fish shell을 default로 했음.
** fish shell
    - fish shell은 해석기, 그리고,omf(oh-my-fish)라고 utility, plugin 관리자가 있다.
* dotfiles about iterm2 and fishshell
** iterm2의 설정
iterm2의 설정은 com.googlecode.iterm2.plist 파일이다. 새 시스템을 설정할때, 이 설정을 load하면 된다.
daily 변경되는 설정은 preference->general->preference에서 automatically로 설정하면 된다.
** fishshell의 설정
fishshell은 .config/fish에 위치해 있다. 이것도 bootstrap.sh에서 관리한다.

* iterm2에서 많이 사용하는 기능
1) 창분할: cmd+d,cmd+w
2) 글자 크기 조정: cmd+(+,-)
* EMACS install
1) https://emacsformacosx.com download and install.
2) emacs_install.sh execute

* 수동으로 설정해야 할것들.
1. Emacs 설치와 settings(아래 설명)
2. karabiner에서 caps lock-> control로 바꾼다.
3. osx에서 한글입력에 대한 input source short cut을 설정한다.
4. iterm2 설정이 제대로 안될 경우,
- font:Hack nerd font 14
- color scheme: monokai-pro
- 한글깨짐 방지: unicode normal form: nfc
5. fish shell이 terminal의 default shell이 아닐경우
- etc/shells 에 /usr/local/bin/fish추가
- chsh -s /usr/local/bin/fish

* Mac OS에서 Emacs
- mac에서 설치본: emacs-mac, aqua emacs, emacs for osx
  (emacs for osx와 brew cask install emacs는 동일한 emacs다.)
- brew --cask install emacs는 emacs for osx를 다운받아서 설치한다.
- emacs server와 emacsclient
나는 emacs daemon이 아닌 emacs server/client로 사용할 것이다.
        - emacs server를 사용하는 이유
          emacs 설정이 많아지면 수행속도가 느려진다.
          emacs init에 (server-start)를 기입해준다. emacs를 terminal에서
         실행하거나, emacs icon을 클릭하면 무조건 server로 동작하게
         했다. 그다음 부터는 emacsclient를 실행한다. emacsclient는 init.el을
         읽지 않고 frame만 만들고 server와 접속해서 사용된다. 그래서 속도가
         빠르다. emacs for osx 페이지에 보면 emacsclient를 osascript를 사용해서
         server가 없으면 server를 실행하고 client로 연결하게 했다. 이것을
         실행하면 server가 없으면 server를 실행하기 때문에 두개의 emacs가
         띄어질 것이다. 이게 좀 불편할 순 있다. 근데 이 방법이 내가 찾은
         유일하게 편한 방식이다. server는 죽이지 않고 client만 죽이고, 실행하고
         이런식으로 한다.

** emacs 설치와 설정
- karabiner에서 caps lock을 left control로 바꾸는 것을 잊지말자.(한글을 위해서 osx preference에서 한글 input source의 short cut을 right-command+space로 하는것도 잊지말자)
- emacs를 emacsformacos에서 down받아서 설치한다.
- [[https://emacsformacosx.com/tips][여기]]에 나온대로 emacs를 만들고 emacsclient link를 만들고  ec를 만든다. alias는 할 필요 없다. chmod 755로 실행가능하게 만든다.(바로 ec를 실행해도 server가 안된다. 그전에 해야 할께 있다. )
- .dotfiles의 cantarell 폰트를 설치한다.
- .dotfiles의 .emacs.d를 home에 복사한다.
- ec를 실행해보자. ( emacs window가 보이나 바닐라 형태다.)
- emacs에서 home에 있는 .emacs.d/emacs.org를 열고 org-babel-tangle을 실행한다.
- M-x all-the-icons-install을 실행한다.
- emacs를 종료 하고 다시 ec로 실행해 보자.




