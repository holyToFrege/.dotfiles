#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("/Users/holy/Projects/rails_project/hello/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/toy_app/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/toyapp/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/third/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/smartmeter/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/TryOpenApi/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility") "/Users/holy/Projects/rails_project/SmartWaterCare/" ("about                               # List versions of all Rails frameworks and the environment" "action_mailbox:ingress:environment  # " "action_mailbox:ingress:exim         # Relay an inbound email from Exim to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:postfix      # Relay an inbound email from Postfix to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:ingress:qmail        # Relay an inbound email from Qmail to Action Mailbox (URL and INGRESS_PASSWORD required)" "action_mailbox:install              # Installs Action Mailbox and its dependencies" "action_mailbox:install:migrations   # Copy migrations from action_mailbox to application" "action_text:install                 # Copy over the migration, stylesheet, and JavaScript files" "action_text:install:migrations      # Copy migrations from action_text to application" "active_storage:install              # Copy over the migration needed to the application" "active_storage:install:migrations   # " "active_storage:update               # " "app:binstub:yarn                    # " "app:template                        # Applies the template supplied by LOCATION=(/path/to/template) or URL" "app:templates:copy                  # " "app:update                          # Update configs and some other initially generated files (or use just update:configs or update:bin)" "app:update:active_storage           # " "app:update:bin                      # " "app:update:configs                  # " "app:update:upgrade_guide_info       # " "assets:clean[keep]                  # Remove old compiled assets" "assets:clobber                      # Remove compiled assets" "assets:environment                  # Load asset compile environment" "assets:precompile                   # Compile all the assets named in config.assets.precompile" "cache_digests:dependencies          # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies   # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "db:_dump                            # " "db:abort_if_pending_migrations      # " "db:charset                          # " "db:check_protected_environments     # " "db:collation                        # " "db:create                           # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to creating the development and test databases, except when DATABASE_URL is present" "db:create:all                       # " "db:drop                             # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config). Without RAILS_ENV or when RAILS_ENV is development, it defaults to dropping the development and test databases, except when DATABASE_URL is present" "db:drop:_unsafe                     # " "db:drop:all                         # " "db:environment:set                  # Set the environment value for the database" "db:fixtures:identify                # " "db:fixtures:load                    # Loads fixtures into the current environment's database" "db:forward                          # " "db:load_config                      # " "db:migrate                          # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                     # Runs the \"down\" for a given migration VERSION" "db:migrate:redo                     # Rolls back the database one migration and re-migrates up (options: STEP=x, VERSION=x)" "db:migrate:reset                    # " "db:migrate:status                   # Display status of migrations" "db:migrate:up                       # Runs the \"up\" for a given migration VERSION" "db:prepare                          # Runs setup if database does not exist, or runs migrations if it does" "db:purge                            # " "db:purge:all                        # " "db:reset                            # Drops and recreates the database from db/schema.rb for the current environment and loads the seeds" "db:rollback                         # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear               # Clears a db/schema_cache.yml file" "db:schema:cache:dump                # Creates a db/schema_cache.yml file" "db:schema:dump                      # Creates a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`)" "db:schema:load                      # Loads a database schema file (either db/schema.rb or db/structure.sql, depending on `config.active_record.schema_format`) into the database" "db:schema:load_if_ruby              # " "db:seed                             # Loads the seed data from db/seeds.rb" "db:seed:replant                     # Truncates tables of each database for current environment and loads the seeds" "db:setup                            # Creates the database, loads the schema, and initializes with the seed data (use db:reset to also drop the database first)" "db:structure:dump                   # Dumps the database structure to db/structure.sql" "db:structure:load                   # Recreates the databases from the structure.sql file" "db:structure:load_if_sql            # " "db:test:load                        # " "db:test:load_schema                 # " "db:test:load_structure              # " "db:test:prepare                     # " "db:test:purge                       # " "db:truncate_all                     # " "db:version                          # Retrieves the current schema version number" "default                             # " "environment                         # " "log:clear                           # Truncates all/specified *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                          # Prints out your Rack middleware stack" "railties:install:migrations         # " "restart                             # Restart app by touching tmp/restart.txt" "secret                              # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "stats                               # Report code statistics (KLOCs, etc) from the application or engine" "test                                # Runs all tests in test folder except system ones" "test:all                            # Runs all tests, including system tests" "test:channels                       # " "test:controllers                    # " "test:db                             # Run tests quickly, but also reset db" "test:functionals                    # " "test:generators                     # " "test:helpers                        # " "test:integration                    # " "test:jobs                           # " "test:mailboxes                      # " "test:mailers                        # " "test:models                         # " "test:prepare                        # " "test:run                            # " "test:system                         # Run system tests only" "test:units                          # " "time:zones[country_or_offset]       # List all time zones, list by two-letter country code (`bin/rails time:zones[US]`), or list by UTC offset (`bin/rails time:zones[-8]`)" "time:zones:all                      # " "time:zones:local                    # " "time:zones:us                       # " "tmp                                 # " "tmp/cache                           # " "tmp/cache/assets                    # " "tmp/pids                            # " "tmp/sockets                         # " "tmp:cache:clear                     # " "tmp:clear                           # Clear cache, socket and screenshot files from tmp/ (narrow w/ tmp:cache:clear, tmp:sockets:clear, tmp:screenshots:clear)" "tmp:create                          # Creates tmp directories for cache, sockets, and pids" "tmp:pids:clear                      # " "tmp:screenshots:clear               # " "tmp:sockets:clear                   # " "webpacker                           # Lists all available tasks in Webpacker" "webpacker:binstubs                  # Installs Webpacker binstubs in this application" "webpacker:check_binstubs            # Verifies that webpack & webpack-dev-server are present" "webpacker:check_node                # Verifies if Node.js is installed" "webpacker:check_yarn                # Verifies if Yarn is installed" "webpacker:clean[keep,age]           # Remove old compiled webpacks" "webpacker:clobber                   # Remove the webpack compiled output directory" "webpacker:compile                   # Compile JavaScript packs using webpack for production with digests" "webpacker:info                      # Provide information on Webpacker's environment" "webpacker:install                   # Install Webpacker in this application" "webpacker:install:angular           # Install everything needed for Angular" "webpacker:install:coffee            # Install everything needed for Coffee" "webpacker:install:elm               # Install everything needed for Elm" "webpacker:install:erb               # Install everything needed for Erb" "webpacker:install:react             # Install everything needed for React" "webpacker:install:stimulus          # Install everything needed for Stimulus" "webpacker:install:svelte            # Install everything needed for Svelte" "webpacker:install:typescript        # Install everything needed for Typescript" "webpacker:install:vue               # Install everything needed for Vue" "webpacker:verify_install            # Verifies if Webpacker is installed" "webpacker:yarn_install              # Support for older Rails versions" "yarn:install                        # Install all JavaScript dependencies as specified via Yarn" "zeitwerk:check                      # Checks project structure for Zeitwerk compatibility")))